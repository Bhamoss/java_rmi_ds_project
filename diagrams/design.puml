@startuml
title Design


package clientside{
class Client {

    Client(String scriptFile, int localOrRemote, ICarRentalAgency icra, Registry registry) {Constructor, vraagt session}
    getCra_stub() : ICarRentalAgency
    setCra_stub(ICarRentalAgency cra_stub)
    getRegistry() : Registry

__ session managing __

    reserveReservationSession(String name) : String
    getNewReservationSession(String name) : ReservationSession
    reserveManagerSession(String name) : String
    getNewManagerSession(String name, String carRentalName) : ManagerSession
    
__ reservation session __

    checkForAvailableCarTypes(ReservationSession session, Date start, Date end)
    addQuoteToSession(ReservationSession session, String name, Date start, Date end, String carType, String region) : void
    confirmQuotes(ReservationSession session, String name) : List<Reservation>
    getCheapestCarType(ReservationSession session, Date start, Date end, String region) : String 

__ manager session __
    registerCrc(ManagerSession session, name : String)
    unregisterCrc(ManagerSession session, name : String)

    getNumberOfReservationsForCarType(ManagerSession ms, String carRentalName, String carType) : int
    getNumberOfReservationsByRenter(ManagerSession ms, String clientName) : int
    getBestClients(ManagerSession ms) : Set<String> 
    getMostPopularCarTypeIn(ManagerSession ms, String carRentalCompanyName, int year) : CarType 

}
Client -->"1" ICarRentalAgency
Client ..> ReservationSession : uses
Client ..> ManagerSession : uses


interface ManagerSession {
    registerCRC(String name) 
    unregisterCRC(String name)
    
    getNumberOfReservationsForCarType(String carRentalName, String carType) : int
    getNumberOfReservationsByRenter(String clientName) : int
    getBestClients() : Set<String>
    getMostPopularCarTypeIn(String carRentalCompanyName, int year) : CarType

    closeSession()
}
interface ReservationSession {
    checkForAvailableCarTypes(Date start, Date end) {prints to output}
    addQuote(ReservationConstraints rc)
    confirmQuotes(String name) : List<Reservation>
    getCheapestCarType(Date start, Date end, String region) : String

    closeSession()
}
interface ICarRentalAgency {
    reserveReservationSession(String name) : String
    reserveManagerSession(String name) : String
    
}
}


package centralPoint{

class Registry {

}
Client -->"1" Registry
CarRentalAgency -->"1" Registry

interface ICarRentalCompany {
    Set<CarType> getAvailableCarTypes(Date start, Date end)
    Quote createQuote(ReservationConstraints constraints, String client)
    Reservation confirmQuote(Quote quote)
    List<Reservation> getReservationsByRenter(String clientName)
    int getNumberOfReservationsForCarType(String carType)
}

class Session {
    - cra : CarRentalAgency {final}
    - name : String {final}
    - registryName : String {final}
    __
    Session(CarRentalAgency cra, String name)
    #  pushToRegistry() {abstract}
    
    # getCra() : CarRentalAgency
    + getRegistryName() : String
    + getName() : String

    closeSession()
}
Session -->"1" CarRentalAgency

class ReservationSessionBean {
    quotes : List<Quotes>
    __
    ReservationSessionBean(CarRentalAgency cra, String name)

    # pushToRegistry() {Override}

    - addQuote(Quote quote)
    checkForAvailableCarTypes(Date start, Date end) : String
    + addQuote(ReservationConstraints rc)
    confirmQuotes(String name) : List<Reservation>
    getCheapestCarType(Date start, Date end, String region) : String
    __
    Remote
}
ReservationSessionBean --|> Session
ReservationSessionBean ..|> ReservationSession : stub
interface ReservationSession





class ManagerSessionBean {
    ManagerSessionBean(CarRentalAgency cra, String name)

    # pushToRegistry() {Override}

    registerCRC(String name) 
    unregisterCRC(String name)
    
    getNumberOfReservationsForCarType(String carRentalName, String carType) : int
    getNumberOfReservationsByRenter(String clientName) : int
    getBestClients() : Set<String>
    getMostPopularCarTypeIn(String carRentalCompanyName, int year) : CarType
    __
    Remote
}
ManagerSessionBean --|> Session
ManagerSessionBean ..|> ManagerSession : stub


class CarRentalAgency {
    - registry : Registry {final}
    - companies : Map<String, ICarRentalCompany>

    + getRegistry() : Registry
    registerCRC(String name) 
    unregisterCRC(String name)
    - zaddCompany(String name, ICarRentalCompany company)
    - removeCompany(String name)


    reserveReservationSession(String name) : String
    reserveManagerSession(String name) : String

    checkForAvailableCarTypes(Date start, Date end) : String
    + createQuote(ReservationConstraints constraints, String client) : Quote
    confirmQuotes(String name) : List<Reservation>
    getCheapestCarType(Date start, Date end, String region) : String

    getNumberOfReservationsForCarType(String carRentalName, String carType) : int
    getNumberOfReservationsByRenter(String clientName) : int
    getBestClients() : Set<String>
    getMostPopularCarTypeIn(String carRentalCompanyName, int year) : CarType

    __
    Remote
}

CarRentalAgency ..|> ICarRentalAgency : stub

interface ICarRentalAgency {
}

}

package specific_car_rental_COMPANY_server {

 
CarRentalAgency -->"*" ICarRentalCompany

class Car {
    private int id
    private CarType type
    private List<Reservation> reservations
    __
    Car(int uid, CarType type)
    getId() : int
    getType() : int
    Iterator<Reservation> getReservations()
    boolean isAvailable(Date start, Date end)
    void addReservation(Reservation res)
    void removeReservation(Reservation reservation)
}
Car -->"*" Reservation
Car -->"1" CarType

class Reservation {
    carId : int
    __
    Reservation(Quote quote, int carId)
    int getCarId()
    String toString()
    String clientInfo()
    int hashCode()
    boolean equals(Object obj)
    __
    Serializable
}
Reservation --|> Quote

class Quote {
    startDate : Date
    endDate : Date
    carRenter : String
    rentalCompany : String
    carType : String
    rentalPrice : double
    __
    getters()
    Quote(String carRenter, Date start, Date end, String rentalCompany, String carType, double rentalPrice)
    toString() : String
    hashCode() : int
    equals(obj : Object) : boolean
    __
    Serializable
}


class CarType {
    private String name
    private int nbOfSeats
    private boolean smokingAllowed
    private double rentalPricePerDay
    private float trunkSpace
    __
    CarType(String name, int nbOfSeats, float trunkSpace, double rentalPricePerDay, boolean smokingAllowed)
    String getName()
    int getNbOfSeats()
    boolean isSmokingAllowed()
    double getRentalPricePerDay()
    float getTrunkSpace()
    String toString()
    int hashCode()
    boolean equals(Object obj)
    __
    Serializable
}

class ReservationException {
    public ReservationException(String string)
    __
    Serializable
}

class CarRentalCompany {
    private List<String> regions
	private String name
	private List<Car> cars
	private Map<String,CarType> carTypes = new HashMap<String, CarType>()
    __
    CarRentalCompany(String name, List<String> regions, List<Car> cars)
    getters()
    setters()
    boolean operatesInRegion(String region)
    Collection<CarType> getAllCarTypes()
    CarType getCarType(String carTypeName)
    boolean isAvailable(String carTypeName, Date start, Date end)
    Set<CarType> getAvailableCarTypes(Date start, Date end)
    int getNumberOfReservationsForCarType(String carType)
    List<Reservation> getReservationsByRenter(String clientName)
    Quote createQuote(ReservationConstraints constraints, String client)
    Reservation confirmQuote(Quote quote)
    void cancelReservation(Reservation res)
    __
    Remote
}
CarRentalCompany ..|> ICarRentalCompany : stub
CarRentalCompany -->"*" Car
CarRentalCompany -->"*" CarType



class ReservationConstraints {
    private Date startDate
    private Date endDate
    private String carType
    private String region
    __
    ReservationConstraints(Date start, Date end, String carType, String region)
    getters()
    setters()
    int hashCode()
    boolean equals(Object obj)
    String toString()
    __
    Serializable
}
}



interface Remote
ICarRentalAgency --|> Remote
ICarRentalCompany --|> Remote
ManagerSession --|> Remote
ReservationSession --|> Remote


@enduml